The ``100-matrix_mul`` module
======================

Usage: write a function that multiples 2 matrices
-------------------------------------------------
This defines a function in python that multiplies 2 matrices

importing the function

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Checking for simple case:
>>> matrix_mul([[2]], [[7]])
[[14]]

Checking for 2 ok matrices:
>>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
[[19, 22, 5], [43, 50, 11], [43, 50, 11]]

Checking for 2 bad matrices:
>>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

Checking for singly empty matrix:
>>> matrix_mul([], [[7]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

Checking for singly empty matrix:
>>> matrix_mul([[]], [[7]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul([[2]], [])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

Checking for doubly empty matrix:
>>> matrix_mul([[2]], [[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

Checking for int list:
>>> matrix_mul([1, 3, 4], [[9]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> matrix_mul([[8]], [2, 4, 6])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

Checking for string arg value:
>>> matrix_mul("hello", [[9]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul([[8]], "world")
Traceback (most recent call last):
...
TypeError: m_b must be a list

Checking for not num list:
>>> matrix_mul([["hello"]], [[2, 4, 6]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[2, 4, 6]], [["hello"]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

Checking for 1 missing argument:
>>> matrix_mul([[3]])
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Checking for both missing arguments:
>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Checking for bad rows in a and b:
>>> matrix_mul([[1, 2], [3, 4, 5], [3, 4]], [[5, 6, 1], [7, 8, 2]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 2]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size
